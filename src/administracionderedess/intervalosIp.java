/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package administracionderedess;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jorge Marcos
 */
public class intervalosIp extends javax.swing.JPanel {

    /**
     * Creates new form calcularPropiedades
     */
    private DefaultTableModel modelo;
    
    public intervalosIp() {
        initComponents();
        
        modelo = new DefaultTableModel();
        modelo.addColumn("Bits de Subred");
        modelo.addColumn("Minimo N V I");
        modelo.addColumn("Minimo N I");
        modelo.addColumn("Maximo N I");
        modelo.addColumn("Maximo N V I");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        IP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Prefijo = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(modelo);
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        LabelMascaraSubred = new javax.swing.JLabel();
        LabelIpBinario = new javax.swing.JLabel();
        LabelAnd = new javax.swing.JLabel();
        LabelMascaraBinario = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(13, 13, 13));

        jLabel1.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(5, 84, 242));
        jLabel1.setText("Direccion IP : ");

        IP.setBackground(new java.awt.Color(51, 51, 51));
        IP.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        IP.setForeground(new java.awt.Color(204, 204, 204));
        IP.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        IP.setBorder(null);
        IP.setCaretColor(new java.awt.Color(204, 204, 204));
        IP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(5, 84, 242));
        jLabel2.setText("Mascara");

        Prefijo.setBackground(new java.awt.Color(51, 51, 51));
        Prefijo.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        Prefijo.setForeground(new java.awt.Color(204, 204, 204));
        Prefijo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Prefijo.setToolTipText("");
        Prefijo.setBorder(null);
        Prefijo.setCaretColor(new java.awt.Color(204, 204, 204));
        Prefijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrefijoActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(242, 5, 92));
        jButton1.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Calcular");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTable1.setBackground(new java.awt.Color(51, 51, 51));
        jTable1.setFont(new java.awt.Font("Dubai", 1, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bits de Subred", "Minimo N V I", "Minimo N I", "Maximo N I", "Maximo N V I",
            })
            {
                boolean[] canEdit = new boolean [] {
                    true, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            jTable1.setAutoscrolls(false);
            jTable1.setGridColor(new java.awt.Color(51, 51, 51));
            jScrollPane1.setViewportView(jTable1);

            jLabel3.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
            jLabel3.setForeground(new java.awt.Color(0, 153, 153));
            jLabel3.setText("Mascara de Subred : ");

            jLabel4.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
            jLabel4.setForeground(new java.awt.Color(0, 153, 153));
            jLabel4.setText("Direccion ip en binario : ");

            jLabel6.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
            jLabel6.setForeground(new java.awt.Color(0, 153, 153));
            jLabel6.setText("Bits de subred");

            jLabel7.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
            jLabel7.setForeground(new java.awt.Color(0, 153, 153));
            jLabel7.setText("Combinaciones");

            LabelMascaraSubred.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
            LabelMascaraSubred.setForeground(new java.awt.Color(204, 204, 204));
            LabelMascaraSubred.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            LabelMascaraSubred.setText("0.0.0.0");
            LabelMascaraSubred.setToolTipText("");

            LabelIpBinario.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
            LabelIpBinario.setForeground(new java.awt.Color(204, 204, 204));
            LabelIpBinario.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            LabelIpBinario.setText("0.0.0.0");
            LabelIpBinario.setToolTipText("");

            LabelAnd.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
            LabelAnd.setForeground(new java.awt.Color(204, 204, 204));
            LabelAnd.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            LabelAnd.setText("0");
            LabelAnd.setToolTipText("");

            LabelMascaraBinario.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
            LabelMascaraBinario.setForeground(new java.awt.Color(204, 204, 204));
            LabelMascaraBinario.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            LabelMascaraBinario.setText("0");
            LabelMascaraBinario.setToolTipText("");

            jLabel5.setText("N V I = numero valido del intervalo");

            jLabel8.setText("N I = numero del intervalo");

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSeparator1)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(LabelMascaraSubred, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addGap(0, 32, Short.MAX_VALUE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(LabelMascaraBinario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(LabelIpBinario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(LabelAnd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addComponent(jSeparator2)
                                .addComponent(jSeparator3))
                            .addGap(26, 26, 26))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(73, 73, 73)
                            .addComponent(jLabel8)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LabelMascaraSubred, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LabelIpBinario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LabelMascaraBinario, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(LabelAnd, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(2, 2, 2)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5))
                            .addGap(3, 3, 3))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(21, 21, 21)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
            );

            jButton2.setBackground(new java.awt.Color(102, 0, 153));
            jButton2.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
            jButton2.setForeground(new java.awt.Color(255, 255, 255));
            jButton2.setText("ver Datos Completos");
            jButton2.setBorder(null);
            jButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton2ActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(22, 22, 22)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(IP, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Prefijo, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(23, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(IP, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(Prefijo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(19, Short.MAX_VALUE))
            );
        }// </editor-fold>//GEN-END:initComponents

    private void IPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IPActionPerformed
        // TODO add your handling code here:
         
    }//GEN-LAST:event_IPActionPerformed

    private void PrefijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrefijoActionPerformed
        // TODO add your handling code here:
         
    }//GEN-LAST:event_PrefijoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setRowCount(0); 
        
        //LLAMAMOS LAS FUNCIONES QUE REALIZAN LOS CALCULOS
        //OBTENEMOS LOS DATOS DEL USUARIO
        String ip = IP.getText();
        String mask = Prefijo.getText();
        
         // Separamos en octetos la IP y la máscara
        String[] ipParts = ip.split("\\.");
        String[] maskParts = mask.split("\\.");

//*--------------------------
         StringBuilder ipBinaria = new StringBuilder();
        
    for (String octeto : ipParts) {
        int num = Integer.parseInt(octeto); // Convertimos cada parte a entero
        String binario = String.format("%8s", Integer.toBinaryString(num)).replace(' ', '0'); // Convertimos a binario con 8 bits
        ipBinaria.append(binario).append("."); // Añadimos cada octeto en binario
    }
    
    LabelIpBinario.setText(""+ipBinaria.substring(0, ipBinaria.length() - 1));
    
//*----------------------------------------------------------------------------------------------

 int primerOcteto = Integer.parseInt(maskParts[0]); // Obtener el primer octeto

    int prefijo=0;
    if (primerOcteto >= 1 || primerOcteto <= 126) {
        prefijo = 8;  // Clase A
    } else if (primerOcteto >= 128 || primerOcteto <= 191) {
        prefijo = 16; // Clase B
    } else if (primerOcteto >= 192 || primerOcteto <= 223) {
        prefijo = 24; // Clase C
    } else {
    JOptionPane.showMessageDialog(null, "IP fuera de rango para clases A, B o C");
    }
    
    StringBuilder mascaraBinaria = new StringBuilder();

    for (int i = 0; i < 32; i++) {
        mascaraBinaria.append(i < prefijo ? "1" : "0");
        if ((i + 1) % 8 == 0 && i != 31) {
            mascaraBinaria.append(".");
        }
    }
    LabelMascaraSubred.setText(""+convertIpToBinary(mask));

            
        //ESCANEAMOS CADA OCTETO DE LA MASCARA Y VALIDAMOS QUE EL VALOR DE CADA OCTETO SEA 255
        int subnetIndex = -1;
        int subnetValue = -1;
        for (int i = 0; i < maskParts.length; i++) {
            int val = Integer.parseInt(maskParts[i]);
            if (val < 255) {//EN CASO DE QUE SE ENCUENTRE UN OCTETO QUE SEA MENOR A 255
                subnetIndex = i;
                subnetValue = val;
                break;
            }
        }
        if (subnetIndex == -1) {//EN CASO DE QUE TODOS LOS OCTETOS SEAN 255
            System.out.println("La máscara no tiene octetos incompletos.");
            return;
        }

        // CONVERTIMOS LOS OCTETOS DE LA MASCARA EN FORMA BINARIA
        String subnetBinary = String.format("%8s", Integer.toBinaryString(subnetValue)).replace(" ", "0");
        // CONTAMOS LA CANTIDAD DE BITS EN 1 (LOS BITS DE LA SUBRED) EN ESE OCTETO
        int networkBits = subnetBinary.indexOf("0"); // EJEMPLO, EN CASO DE QUE SEA 11000000, DARA COMO RESULTADO 2
        // CALCULAMOS LAS COMBINACIONES POSIBLES USANDO SOLO ESOS BITS, DESCARTANDO LA COMBINACION DE 00 Y 11
        int max = (int) Math.pow(2, networkBits);
        int numCombinations = max - 2; // Ej: 2^2 - 2 = 4 - 2 = 2
        
        LabelMascaraBinario.setText(subnetBinary);
        LabelAnd.setText(""+numCombinations);
        
        System.out.println("Octeto de la máscara en binario: " + subnetBinary);//OBTENEMOS EL OCTETO EN EL CUAL SE ENCUENTRA LA PARTE DE LA SUBRED
        System.out.println("Bits de red en ese octeto: " + networkBits);//OBTENEMOS LA CANTIDAD DE BITS DE LA SUBRED DE ESE OCTETO
        System.out.println("Generando " + numCombinations + " combinaciones posibles...\n");//MOSTRAMOS LA CANTIDAD DE COMBINACIONES POSIBLES

        // GENERAMOS LAS COMBINACIONES DE 1 DE LA PARTE DEL INTERVALO
        List<String> combinations = new ArrayList<>();
        for (int i = 1; i < max - 1; i++) {
            String binary = String.format("%" + networkBits + "s", Integer.toBinaryString(i)).replace(" ", "0");
            combinations.add(binary);
        }

        // PARA CADA COMBINACION SE CONSTRUYE UN NUEVO NIVEL DEL OCTETO
        // SE TOMA LA COMBINACION Y SE LE AÑADEN CEROS A LA DERECHA PARA FORMAR 8 BITS, EJEMPLO: 01 --> 01000000
        for (String combo : combinations) {
            // CONSTRUIMOS EL NUEVO CUARTO OCTETO DE LOS BITS DE SUBRED GENERADOS MAS LOS CEROS A LA DERECHA PARA LA PARTE DE HOST
            String fullOctetBinary = combo + "0".repeat(8 - networkBits);
            int newOctetValue = Integer.parseInt(fullOctetBinary, 2);

            // SE CLONA EL ARREGLO DE LA IP Y SE REEMPLAZA EL OCTETO CORRESPONDIENTE
            String[] newIpParts = ipParts.clone();
            //newIpParts almacena la direccion ip de esta forma ["192", "168", "1", "0"]
            newIpParts[subnetIndex] = String.valueOf(newOctetValue);
            //subnetIndex almacena el numero entero de la posicion del octeto en el cual se encuentra el intervalo de la subred

            // CALCULAMOS LA DIRECCION DE RED, LOS OCTETOS SIGUIENTES SE PONEN EN 0
            String direccionDeRed = getNetworkAddress(newIpParts, subnetIndex);

            // PARA OBTENER LA PRIMERA DIRECCION UTILIZABLE SE LE AUMENTA LA ULTIMA POSICION DEL OCTETO EN 1
            String primeraUtilizable = getFirstUsable(direccionDeRed);

            // CALCULAMOS LA DIRECCION DE BROADCAST
            // EN EL OCTETO INCOMPLETO SE PONEN LOS BITS DE HOST EN 1
            String direccionBroadcast = getBroadcastAddress(newIpParts, subnetIndex, networkBits);

            String ultimaUtilizable = getLastUsable(direccionBroadcast);
            
            Object[] filaIpDecimal = {combo, primeraUtilizable,direccionDeRed,direccionBroadcast,ultimaUtilizable};
                    modelo.addRow(filaIpDecimal);//Mostrar los datos en la tabla
            Object[] filaIpBinario = {"",convertIpToBinary(primeraUtilizable), convertIpToBinary(direccionDeRed),convertIpToBinary(direccionBroadcast), convertIpToBinary(ultimaUtilizable)};
                    modelo.addRow(filaIpBinario);//Mostrar los datos en la tabla
                    
                    
            jTable1.setModel(modelo);
            jTable1.repaint();
            jTable1.revalidate();
            // PARA LA ULTIMA IP UTILIZABLE SE LE RESTA UN 1 AL ULTIMO OCTETO DE LA DIRECCION IP DEL BROADCAST
            System.out.println("------------------------------------------------------------------------------");
            System.out.println("Combinacion (bits de red): " + combo);
            //System.out.println("Octeto generado (binario): " + fullOctetBinary + " -> " + newOctetValue);
            System.out.println("Direccion de Red: " + direccionDeRed);
            System.out.println("Primera Direccion Utilizable: " + primeraUtilizable);
            System.out.println("Broadcast: " + direccionBroadcast);
            System.out.println("Ultima Direccion Utilizable: " + ultimaUtilizable + "\n");
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // IMPRIMIMOS LOS DATOS EN UN NUEVO FRAME DE FORMA COMPLETA
        JFrame tablaCompleta = new JFrame("Tabla completa");
        tablaCompleta.setSize(600, 400);
        tablaCompleta.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Para cerrar solo esta ventana

        // Obtener el modelo actual de la tabla
        DefaultTableModel modeloOriginal = (DefaultTableModel) jTable1.getModel();

        // Crear una nueva tabla con el mismo modelo
        JTable nuevaTabla = new JTable(modeloOriginal);
        nuevaTabla.setFont(new java.awt.Font("Dubai", 1, 16));
        nuevaTabla.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

        // Agregar la tabla a un JScrollPane para permitir el desplazamiento
        JScrollPane scrollPane = new JScrollPane(nuevaTabla);
        tablaCompleta.add(scrollPane);

        // Hacer visible el nuevo JFrame
        tablaCompleta.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    //FUNCIONES PARA OBTENER LAS DIRECCIONES IP
    //FUNCION PARA OBTENER LAS DIRECCIONES IP EN FORMA BINARIA
    public static String convertIpToBinary(String ip) {
    String[] parts = ip.split("\\.");
    StringBuilder binaryIp = new StringBuilder();
    
    for (String part : parts) {
        int num = Integer.parseInt(part);
        String binaryOctet = String.format("%08d", Integer.parseInt(Integer.toBinaryString(num)));
        binaryIp.append(binaryOctet).append(".");
    }
    
    return binaryIp.substring(0, binaryIp.length() - 1); // Eliminar el último "."
}

    // PARA LA DIRECCION DE RED, LA PARTE DE HOST POSTERIOR A LOS BITS DE SUBRED, SE PONEN EN 0
    public static String getNetworkAddress(String[] ipParts, int subnetIndex) {
        String[] parts = ipParts.clone();
        for (int i = subnetIndex + 1; i < parts.length; i++) {
            parts[i] = "0";
        }
        return String.join(".", parts);
    }

    // LA PRIMERA RED UTILIZABLE ES SUMANDOLE 1 AL ULTIMO OCTETO DE LA DIRECCION IP
    public static String getFirstUsable(String networkAddress) {
        String[] parts = networkAddress.split("\\.");
        parts[3] = String.valueOf(Integer.parseInt(parts[3]) + 1);
        return String.join(".", parts);
    }

    // LA DIRECCION DE BROADCAST EN EL OCTETO INCOMPLETO SE PONEN LOS BITS DE HOST EN 1
    // es decir, se OR con ((1 << (8 - networkBits)) - 1), y en los siguientes octetos se pone 255.
    public static String getBroadcastAddress(String[] ipParts, int subnetIndex, int networkBits) {
        String[] parts = ipParts.clone();
        int currentValue = Integer.parseInt(parts[subnetIndex]);
        int hostMask = (1 << (8 - networkBits)) - 1;
        int broadcastPart = currentValue | hostMask;
        parts[subnetIndex] = String.valueOf(broadcastPart);
        for (int i = subnetIndex + 1; i < parts.length; i++) {
            parts[i] = "255";
        }
        return String.join(".", parts);
    }

    // PARA OBTENER LA ULTIMA DIRECCION UTILIZABLE SE LE RESTA 1 AL ULTIMO OCTETO DE LA DIRECCION IP
    public static String getLastUsable(String broadcastAddress) {
        String[] parts = broadcastAddress.split("\\.");
        parts[3] = String.valueOf(Integer.parseInt(parts[3]) - 1);
        return String.join(".", parts);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IP;
    private javax.swing.JLabel LabelAnd;
    private javax.swing.JLabel LabelIpBinario;
    private javax.swing.JLabel LabelMascaraBinario;
    private javax.swing.JLabel LabelMascaraSubred;
    private javax.swing.JTextField Prefijo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
